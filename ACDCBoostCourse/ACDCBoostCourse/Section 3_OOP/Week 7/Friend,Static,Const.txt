4. Friend / Static / Const

 1) Friend
   - 수평적인 관계의 클래스 간의 멤버 변수를 공유해야 할 때 사용
   - friend를 사용하면 자신의 개체뿐만이 아닌 다른 타입의 개체를 접근하는 것이 가능해짐
      -> 코드의 확장 수월
   - 캡슐화 파괴의 주범이 되어 설계가 꼬일 가능성 존재
      -> 필요한 경우에만 사용할 것
   - 클래스에서 friend 함수 선언 시 그 함수는 private으로 되어 있는 클래스의 멤버변수 등에 직접적 접근 가능
   - friend 클래스 선언 시, 선언한 클래스의 전체가 접근 제어 지시자의 영향을 받지 않음
      -> friend로 선언된 클래스의 모든 멤버와 메서드에 접근 가능

 2) Static
  static 멤버 변수는 모든 객체들이 접근해야 하므로 프로그램 시작부터 끝까지 유지되어야 한다
  -> 따라서 전역 범위에서만 정의(초기화)할 수 있다
  ★ 컴파일 타임에 정의(초기화)가 되어야 함!

 3) Const
  - const 처리된 멤버 함수 안에서는 역시 const 처리된 멤버 함수만 부를 수 있음
  - 설령 내용 중에 멤버 변수값을 바꾸는 것이 없더라도, const 처리하지 않으면 const형 오브젝트에서 부를 수 없음

   (1) 변수
    ① const int val
      - val의 데이터 형이 (const int)형이므로 값을 수정할 수 없음
    ② const int* val
      - val은 (const int)형의 포인터 값
      - val의 값은 수정 가능
      - val이 가리키는 데이터는 (const int)형이므로 수정 불가능
    ③ int* const val
      - val의 데이터 형은 int*형이고, const 키워드로인해 수정 불가능
      - val이 가리키는 데이터는 (int)형이므로 값을 수정할 수 있음
    ④ const int* const val
      - val의 값이나 val이 가리키는 데이터나 둘 다 수정 불가능

   (2) 함수
    ① const int func (int a) { }
      - func (int a)의 반환 데이터 형이 const int이므로 반환값은 수정 불가능
    ② int func (const int a) { }
      - a의 값 수정 불가능
    ③ int func (int a) const { }
      - 함수 내용에서 멤버 변수 값을 수정하지 않겠다는 의미
      - 사용할 수 있는 함수들도 const형 함수들만 사용할 수 있음
      -> 위의 특성들 때문에, Get함수에서 많이 사용하고 Set함수에서는 거의 사용하지 않음
    
